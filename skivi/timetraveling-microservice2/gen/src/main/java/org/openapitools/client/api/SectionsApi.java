/*
 * API pentru utilizatori Timetraveling microservice
 * Prin acest API care e RESTful, un administrator poate gestiona datele despre cursurile ce tin de calatoritul in timp si acest API este disponibil pentru aplicatia SkiVI, pentru a procura articolele si ale afisa utilizatorilor, dar si pentru gestiunea lor.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Section;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SectionsApi {
    private ApiClient localVarApiClient;

    public SectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for sectionsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Am returnat cu succes toate sectiunile disponibile. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Daca clientul ce a depus cererea nu are dreptul de administrator sau nu este inregistrat la acest skill, lista tuturor sectiunilor nu este disponibila. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sectionsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sectionsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sectionsGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Intoarce lista cu toate sectiunile (stratul de sus al cursurilor).
     * @return List&lt;Section&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Am returnat cu succes toate sectiunile disponibile. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Daca clientul ce a depus cererea nu are dreptul de administrator sau nu este inregistrat la acest skill, lista tuturor sectiunilor nu este disponibila. </td><td>  -  </td></tr>
     </table>
     */
    public List<Section> sectionsGet() throws ApiException {
        ApiResponse<List<Section>> localVarResp = sectionsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Intoarce lista cu toate sectiunile (stratul de sus al cursurilor).
     * @return ApiResponse&lt;List&lt;Section&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Am returnat cu succes toate sectiunile disponibile. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Daca clientul ce a depus cererea nu are dreptul de administrator sau nu este inregistrat la acest skill, lista tuturor sectiunilor nu este disponibila. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Section>> sectionsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sectionsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Section>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Intoarce lista cu toate sectiunile (stratul de sus al cursurilor).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Am returnat cu succes toate sectiunile disponibile. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Daca clientul ce a depus cererea nu are dreptul de administrator sau nu este inregistrat la acest skill, lista tuturor sectiunilor nu este disponibila. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sectionsGetAsync(final ApiCallback<List<Section>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sectionsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Section>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sectionsPost
     * @param section  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cererea de creare sectiune a fost efectuata cu succes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sectionsPostCall(Section section, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = section;

        // create path and map variables
        String localVarPath = "/sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sectionsPostValidateBeforeCall(Section section, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'section' is set
        if (section == null) {
            throw new ApiException("Missing the required parameter 'section' when calling sectionsPost(Async)");
        }
        

        okhttp3.Call localVarCall = sectionsPostCall(section, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param section  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cererea de creare sectiune a fost efectuata cu succes </td><td>  -  </td></tr>
     </table>
     */
    public void sectionsPost(Section section) throws ApiException {
        sectionsPostWithHttpInfo(section);
    }

    /**
     * 
     * 
     * @param section  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cererea de creare sectiune a fost efectuata cu succes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sectionsPostWithHttpInfo(Section section) throws ApiException {
        okhttp3.Call localVarCall = sectionsPostValidateBeforeCall(section, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param section  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cererea de creare sectiune a fost efectuata cu succes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sectionsPostAsync(Section section, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sectionsPostValidateBeforeCall(section, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
